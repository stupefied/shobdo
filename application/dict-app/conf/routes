# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

###############################################
# 0. Splash dictionary message and test routes:
###############################################
GET     /api/v1/                      controllers.WordController.index()
GET     /api/v1/gettest               controllers.AdminController.testGet()
POST    /api/v1/posttest              controllers.AdminController.testPost()

################################
# CRUDL and search API for word:
################################

# 1. Create word: (body contains the word in json)
POST    /api/v1/word                  controllers.WordController.createWord()

# 2. Get word:
GET     /api/v1/word/:wordId          controllers.WordController.getWordByWordId(wordId: String)

# 3. Get word by spelling:
GET     /api/v1/word/:wordSpelling    controllers.WordController.getWordBySpelling(wordSpelling: String)

# 4. Get word by spelling using POST request (since Bengali chars do not play well in route):
POST    /api/v1/word/postget          controllers.WordController.getWordBySpellingPost()

# 5. Update word, request body contains json word:
PUT     /api/v1/word/:wordId          controllers.WordController.updateWord(wordId: String)

# 6. Delete word:
DELETE  /api/v1/word/:wordId          controllers.WordController.deleteWord(wordId: String)

# 7. List words
GET     /api/v1/word/list             controllers.WordController.listWords(startWordId: String, limit: Integer?=null)

# 8. Search words by spelling, body contains "searchString":
POST    /api/v1/search                controllers.WordController.searchWordsBySpelling()

##############################
# CRUDL API for word meaningsMap:
##############################

# 1. Create a new meaning of a word
POST    /api/v1/word/:wordId/meaningsMap                   controllers.WordController.createMeaning(wordId: String)

# 2. Get a specific meaning of a word
GET     /api/v1/word/:wordId/meaningsMap/:meaningId        controllers.WordController.getMeaning(wordId: String, meaningId: String)

# 3. Update a specific meaning of a word
PUT     /api/v1/word/:wordId/meaningsMap/:meaningId        controllers.WordController.updateMeaning(wordId: String, meaningId: String)

# 4. Delete a specific meaning of a word
DELETE  /api/v1/word/:wordId/meaningsMap/:meaningId        controllers.WordController.deleteMeaning(wordId: String, meaningId: String)

# 5. List meaningsMap of a word
GET     /api/v1/word/:wordId/meaningsMap/list              controllers.WordController.listMeanings(wordId: String)

##############
# Admin stuff:
##############
# CRUDL for users GENERAL, REVIEWER, ADMIN

# 8. Generate random dictionary, body contains wordCount:
POST    /api/v1/generate              controllers.WordController.createRandomDictionary()

# 9. To clear/flush redis cache:
GET     /api/v1/admin/flushcache      controllers.AdminController.flushCache()

####################################################
# THE FOLLOWINGS ARE EXTRA TEMPORARY EXAMPLE ROUTES:
####################################################

# An example controller showing a sample home page
GET     /                             controllers.HomeController.index
# An example controller showing how to use dependency injection
GET     /count                        controllers.CountController.count
# An example controller showing how to write asynchronous code
GET     /message                      controllers.AsyncController.message
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                 controllers.Assets.versioned(path="/public", file: Asset)
